/*
 * Centaurean libssc
 * http://www.libssc.net
 *
 * Copyright (c) 2013, Guillaume Voirin
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Centaurean nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * 11/11/13 16:21
 */

#include "kernel_argonaut.h"

#define FORMAT(v)               0##v##llu

#define ISOLATE(b, p)           ((FORMAT(b) / p) & 0x1)

#define BINARY_TO_UINT(b)        ((ISOLATE(b, 1llu) ? 0x1 : 0)\
                                + (ISOLATE(b, 8llu) ? 0x2 : 0)\
                                + (ISOLATE(b, 64llu) ? 0x4 : 0)\
                                + (ISOLATE(b, 512llu) ? 0x8 : 0)\
                                + (ISOLATE(b, 4096llu) ? 0x10 : 0)\
                                + (ISOLATE(b, 32768llu) ? 0x20 : 0)\
                                + (ISOLATE(b, 262144llu) ? 0x40 : 0)\
                                + (ISOLATE(b, 2097152llu) ? 0x80 : 0)\
                                + (ISOLATE(b, 16777216llu) ? 0x100 : 0)\
                                + (ISOLATE(b, 134217728llu) ? 0x200 : 0)\
                                + (ISOLATE(b, 1073741824llu) ? 0x400 : 0)\
                                + (ISOLATE(b, 8589934592llu) ? 0x800 : 0)\
                                + (ISOLATE(b, 68719476736llu) ? 0x1000 : 0)\
                                + (ISOLATE(b, 549755813888llu) ? 0x2000 : 0)\
                                + (ISOLATE(b, 4398046511104llu) ? 0x4000 : 0)\
                                + (ISOLATE(b, 35184372088832llu) ? 0x8000 : 0)\
                                + (ISOLATE(b, 281474976710656llu) ? 0x10000 : 0)\
                                + (ISOLATE(b, 2251799813685248llu) ? 0x20000 : 0))

#define SSC_ARGONAUT_PRIMARY_HUFFMAN_CODES {\
{BINARY_TO_UINT(0), 0},\
{BINARY_TO_UINT(1111), 4},\
{BINARY_TO_UINT(1100), 4},\
{BINARY_TO_UINT(1010), 4},\
{BINARY_TO_UINT(1000), 4},\
{BINARY_TO_UINT(0111), 4},\
{BINARY_TO_UINT(0110), 4},\
{BINARY_TO_UINT(0011), 4},\
{BINARY_TO_UINT(0010), 4},\
{BINARY_TO_UINT(10011), 5},\
{BINARY_TO_UINT(01010), 5},\
{BINARY_TO_UINT(01001), 5},\
{BINARY_TO_UINT(00010), 5},\
{BINARY_TO_UINT(00000), 5},\
{BINARY_TO_UINT(10111), 5},\
{BINARY_TO_UINT(111011), 6},\
{BINARY_TO_UINT(111010), 6},\
{BINARY_TO_UINT(110101), 6},\
{BINARY_TO_UINT(101101), 6},\
{BINARY_TO_UINT(100101), 6},\
{BINARY_TO_UINT(010001), 6},\
{BINARY_TO_UINT(000111), 6},\
{BINARY_TO_UINT(000011), 6},\
{BINARY_TO_UINT(1110011), 7},\
{BINARY_TO_UINT(1110010), 7},\
{BINARY_TO_UINT(1101101), 7},\
{BINARY_TO_UINT(1101001), 7},\
{BINARY_TO_UINT(1011000), 7},\
{BINARY_TO_UINT(0100001), 7},\
{BINARY_TO_UINT(0000100), 7},\
{BINARY_TO_UINT(11100000), 8},\
{BINARY_TO_UINT(11011111), 8},\
{BINARY_TO_UINT(11011110), 8},\
{BINARY_TO_UINT(11011100), 8},\
{BINARY_TO_UINT(11011001), 8},\
{BINARY_TO_UINT(11010001), 8},\
{BINARY_TO_UINT(10010011), 8},\
{BINARY_TO_UINT(10010010), 8},\
{BINARY_TO_UINT(10010001), 8},\
{BINARY_TO_UINT(01011111), 8},\
{BINARY_TO_UINT(01011100), 8},\
{BINARY_TO_UINT(01011010), 8},\
{BINARY_TO_UINT(01000001), 8},\
{BINARY_TO_UINT(01000000), 8},\
{BINARY_TO_UINT(00011011), 8},\
{BINARY_TO_UINT(00011001), 8},\
{BINARY_TO_UINT(00011000), 8},\
{BINARY_TO_UINT(00001011), 8},\
{BINARY_TO_UINT(111000110), 9},\
{BINARY_TO_UINT(111000101), 9},\
{BINARY_TO_UINT(111000011), 9},\
{BINARY_TO_UINT(111000010), 9},\
{BINARY_TO_UINT(110111011), 9},\
{BINARY_TO_UINT(110100001), 9},\
{BINARY_TO_UINT(110100000), 9},\
{BINARY_TO_UINT(101100101), 9},\
{BINARY_TO_UINT(100100001), 9},\
{BINARY_TO_UINT(010111101), 9},\
{BINARY_TO_UINT(010111100), 9},\
{BINARY_TO_UINT(010111011), 9},\
{BINARY_TO_UINT(010110111), 9},\
{BINARY_TO_UINT(010110110), 9},\
{BINARY_TO_UINT(010110011), 9},\
{BINARY_TO_UINT(010110010), 9},\
{BINARY_TO_UINT(010110001), 9},\
{BINARY_TO_UINT(000110101), 9},\
{BINARY_TO_UINT(000010101), 9},\
{BINARY_TO_UINT(000010100), 9},\
{BINARY_TO_UINT(1110001111), 10},\
{BINARY_TO_UINT(1101110100), 10},\
{BINARY_TO_UINT(1101100010), 10},\
{BINARY_TO_UINT(1011001110), 10},\
{BINARY_TO_UINT(1011001101), 10},\
{BINARY_TO_UINT(1011001100), 10},\
{BINARY_TO_UINT(1011001000), 10},\
{BINARY_TO_UINT(1001000000), 10},\
{BINARY_TO_UINT(0101110100), 10},\
{BINARY_TO_UINT(11100011100), 11},\
{BINARY_TO_UINT(11100010011), 11},\
{BINARY_TO_UINT(11011101011), 11},\
{BINARY_TO_UINT(11011000110), 11},\
{BINARY_TO_UINT(11011000001), 11},\
{BINARY_TO_UINT(11011000000), 11},\
{BINARY_TO_UINT(111000100100), 12},\
{BINARY_TO_UINT(110111010101), 12},\
{BINARY_TO_UINT(110110001111), 12},\
{BINARY_TO_UINT(110110001110), 12},\
{BINARY_TO_UINT(110110000110), 12},\
{BINARY_TO_UINT(101100111111), 12},\
{BINARY_TO_UINT(101100100111), 12},\
{BINARY_TO_UINT(101100100110), 12},\
{BINARY_TO_UINT(101100100101), 12},\
{BINARY_TO_UINT(100100000101), 12},\
{BINARY_TO_UINT(010111010100), 12},\
{BINARY_TO_UINT(010110000110), 12},\
{BINARY_TO_UINT(010110000100), 12},\
{BINARY_TO_UINT(000110100111), 12},\
{BINARY_TO_UINT(000110100000), 12},\
{BINARY_TO_UINT(1110001000001), 13},\
{BINARY_TO_UINT(1110001000000), 13},\
{BINARY_TO_UINT(1101110101000), 13},\
{BINARY_TO_UINT(1101100001110), 13},\
{BINARY_TO_UINT(1101100001001), 13},\
{BINARY_TO_UINT(1011001111101), 13},\
{BINARY_TO_UINT(1011001111100), 13},\
{BINARY_TO_UINT(1011001111011), 13},\
{BINARY_TO_UINT(1011001111001), 13},\
{BINARY_TO_UINT(1011001111000), 13},\
{BINARY_TO_UINT(1011001001001), 13},\
{BINARY_TO_UINT(1011001001000), 13},\
{BINARY_TO_UINT(1001000001100), 13},\
{BINARY_TO_UINT(1001000001000), 13},\
{BINARY_TO_UINT(0101110101110), 13},\
{BINARY_TO_UINT(0101110101011), 13},\
{BINARY_TO_UINT(0101100001111), 13},\
{BINARY_TO_UINT(0101100001010), 13},\
{BINARY_TO_UINT(0101100000110), 13},\
{BINARY_TO_UINT(0101100000101), 13},\
{BINARY_TO_UINT(0101100000011), 13},\
{BINARY_TO_UINT(0101100000010), 13},\
{BINARY_TO_UINT(0101100000000), 13},\
{BINARY_TO_UINT(0001101001101), 13},\
{BINARY_TO_UINT(0001101001011), 13},\
{BINARY_TO_UINT(0001101001010), 13},\
{BINARY_TO_UINT(0001101001000), 13},\
{BINARY_TO_UINT(0001101000110), 13},\
{BINARY_TO_UINT(0001101000101), 13},\
{BINARY_TO_UINT(0001101000100), 13},\
{BINARY_TO_UINT(0001101000010), 13},\
{BINARY_TO_UINT(1110001110100), 13},\
{BINARY_TO_UINT(1110001001010), 13},\
{BINARY_TO_UINT(11100011101110), 14},\
{BINARY_TO_UINT(11100011101101), 14},\
{BINARY_TO_UINT(11100011101100), 14},\
{BINARY_TO_UINT(11100011101010), 14},\
{BINARY_TO_UINT(11100010010111), 14},\
{BINARY_TO_UINT(11100010010110), 14},\
{BINARY_TO_UINT(11100010001111), 14},\
{BINARY_TO_UINT(11100010001110), 14},\
{BINARY_TO_UINT(11100010001100), 14},\
{BINARY_TO_UINT(11100010001011), 14},\
{BINARY_TO_UINT(11100010001010), 14},\
{BINARY_TO_UINT(11100010001000), 14},\
{BINARY_TO_UINT(11100010000111), 14},\
{BINARY_TO_UINT(11100010000101), 14},\
{BINARY_TO_UINT(11100010000100), 14},\
{BINARY_TO_UINT(11011101010010), 14},\
{BINARY_TO_UINT(11011000011110), 14},\
{BINARY_TO_UINT(11011000010111), 14},\
{BINARY_TO_UINT(11011000010110), 14},\
{BINARY_TO_UINT(11011000010101), 14},\
{BINARY_TO_UINT(11011000010100), 14},\
{BINARY_TO_UINT(11011000010001), 14},\
{BINARY_TO_UINT(10110011110101), 14},\
{BINARY_TO_UINT(10110011110100), 14},\
{BINARY_TO_UINT(10010000011111), 14},\
{BINARY_TO_UINT(10010000011110), 14},\
{BINARY_TO_UINT(10010000011101), 14},\
{BINARY_TO_UINT(10010000011100), 14},\
{BINARY_TO_UINT(10010000011011), 14},\
{BINARY_TO_UINT(10010000010011), 14},\
{BINARY_TO_UINT(01011101011110), 14},\
{BINARY_TO_UINT(01011101011011), 14},\
{BINARY_TO_UINT(01011101011010), 14},\
{BINARY_TO_UINT(01011101011001), 14},\
{BINARY_TO_UINT(01011101011000), 14},\
{BINARY_TO_UINT(01011101010100), 14},\
{BINARY_TO_UINT(01011000011101), 14},\
{BINARY_TO_UINT(01011000011100), 14},\
{BINARY_TO_UINT(01011000010110), 14},\
{BINARY_TO_UINT(01011000001110), 14},\
{BINARY_TO_UINT(01011000001001), 14},\
{BINARY_TO_UINT(01011000001000), 14},\
{BINARY_TO_UINT(01011000000011), 14},\
{BINARY_TO_UINT(00011010011001), 14},\
{BINARY_TO_UINT(00011010011000), 14},\
{BINARY_TO_UINT(00011010010011), 14},\
{BINARY_TO_UINT(00011010010010), 14},\
{BINARY_TO_UINT(00011010001111), 14},\
{BINARY_TO_UINT(00011010001110), 14},\
{BINARY_TO_UINT(00011010000110), 14},\
{BINARY_TO_UINT(111000111011110), 15},\
{BINARY_TO_UINT(111000100011011), 15},\
{BINARY_TO_UINT(111000100010011), 15},\
{BINARY_TO_UINT(111000100001101), 15},\
{BINARY_TO_UINT(111000100001100), 15},\
{BINARY_TO_UINT(110111010100110), 15},\
{BINARY_TO_UINT(100100000100101), 15},\
{BINARY_TO_UINT(100100000100100), 15},\
{BINARY_TO_UINT(010111010101011), 15},\
{BINARY_TO_UINT(010110000011111), 15},\
{BINARY_TO_UINT(010110000000101), 15},\
{BINARY_TO_UINT(000110100001110), 15},\
{BINARY_TO_UINT(1110001110111110), 16},\
{BINARY_TO_UINT(1110001110101111), 16},\
{BINARY_TO_UINT(1110001110101101), 16},\
{BINARY_TO_UINT(1110001000110101), 16},\
{BINARY_TO_UINT(1110001000100101), 16},\
{BINARY_TO_UINT(1101110101001111), 16},\
{BINARY_TO_UINT(1101100001111110), 16},\
{BINARY_TO_UINT(1101100001000000), 16},\
{BINARY_TO_UINT(1001000001101001), 16},\
{BINARY_TO_UINT(0101110101111111), 16},\
{BINARY_TO_UINT(0101110101111110), 16},\
{BINARY_TO_UINT(0101110101111100), 16},\
{BINARY_TO_UINT(0101110101010100), 16},\
{BINARY_TO_UINT(0101100001011110), 16},\
{BINARY_TO_UINT(0101100001011101), 16},\
{BINARY_TO_UINT(0101100001011100), 16},\
{BINARY_TO_UINT(0101100000111101), 16},\
{BINARY_TO_UINT(0101100000001001), 16},\
{BINARY_TO_UINT(0001101000011111), 16},\
{BINARY_TO_UINT(0001101000011110), 16},\
{BINARY_TO_UINT(0001001000011110), 16},\
{BINARY_TO_UINT(0001011000011110), 16},\
{BINARY_TO_UINT(0001001100011110), 16},\
{BINARY_TO_UINT(0001001010011110), 16},\
{BINARY_TO_UINT(0001001001011110), 16},\
{BINARY_TO_UINT(0001001000111110), 16},\
{BINARY_TO_UINT(0001001000011111), 16},\
{BINARY_TO_UINT(1001001000011110), 16},\
{BINARY_TO_UINT(0101001010011111), 16},\
{BINARY_TO_UINT(0011001010111110), 16},\
{BINARY_TO_UINT(1001101000011110), 16},\
{BINARY_TO_UINT(1101001000011110), 16},\
{BINARY_TO_UINT(1011001000011110), 16},\
{BINARY_TO_UINT(1001101000011111), 16},\
{BINARY_TO_UINT(1001011000011110), 16},\
{BINARY_TO_UINT(1001001100011110), 16},\
{BINARY_TO_UINT(1001001010011110), 16},\
{BINARY_TO_UINT(1001001001011110), 16},\
{BINARY_TO_UINT(1001001000111110), 16},\
{BINARY_TO_UINT(1001001000011111), 16},\
{BINARY_TO_UINT(1111001000011110), 16},\
{BINARY_TO_UINT(1101101000011110), 16},\
{BINARY_TO_UINT(1101011000011110), 16},\
{BINARY_TO_UINT(1101001100011110), 16},\
{BINARY_TO_UINT(1101001010011110), 16},\
{BINARY_TO_UINT(1101001001011110), 16},\
{BINARY_TO_UINT(1101001000111110), 16},\
{BINARY_TO_UINT(1101001000011111), 16},\
{BINARY_TO_UINT(0101001000011110), 16},\
{BINARY_TO_UINT(0111001000011110), 16},\
{BINARY_TO_UINT(0101101000011110), 16},\
{BINARY_TO_UINT(0101011000011110), 16},\
{BINARY_TO_UINT(0101001100011110), 16},\
{BINARY_TO_UINT(0101001010011110), 16},\
{BINARY_TO_UINT(0101001001011110), 16},\
{BINARY_TO_UINT(0101001000111110), 16},\
{BINARY_TO_UINT(0101001000011111), 16},\
{BINARY_TO_UINT(0011001000011110), 16},\
{BINARY_TO_UINT(0011101000011110), 16},\
{BINARY_TO_UINT(0011011000011110), 16},\
{BINARY_TO_UINT(0011001100011110), 16},\
{BINARY_TO_UINT(0011001010011110), 16},\
{BINARY_TO_UINT(0011001001011110), 16},\
}

/*
 * Lookup table generation
 */

static const ssc_argonaut_huffman_code ssc_argonaut_primary_huffman_codes[256] = SSC_ARGONAUT_PRIMARY_HUFFMAN_CODES;

#define S4(i)    S1((i)),   S1((i)+1),     S1((i)+2),     S1((i)+3)
#define S16(i)   S4((i)),   S4((i)+4),     S4((i)+8),     S4((i)+12)
#define S64(i)   S16((i)),  S16((i)+16),   S16((i)+32),   S16((i)+48)
#define S256(i)  S64((i)),  S64((i)+64),   S64((i)+128),  S64((i)+192)
#define S1024(i) S256((i)), S256((i)+256), S256((i)+512), S256((i)+768)
#define S4096(i) S1024((i)),S1024((i)+1024),S1024((i)+2048),S1024((i)+3072)
#define S16384(i) S4096((i)), S4096((i)+4096), S4096((i)+8192), S4096((i)+12288)
#define S65536(i) S16384((i)), S16384((i)+16384), S16384((i)+32768), S16384((i)+49152)

static const uint32_t ssc_argonaut_primary_huffman_lookup[65536] = {
#define S1(i) ((i & 1) | ((i & 2) << 1) | ((i & 4) << 2) | ((i & 8) << 3))
    S65536(0)
#undef S1
};

#define F_2_1(i)    F(i),        F((i) + 1)
#define F_2_2(i)    F_2_1(i),    F_2_1((i) + 2)
#define F_2_3(i)    F_2_2(i),    F_2_2((i) + 4)
#define F_2_4(i)    F_2_3(i),    F_2_3((i) + 8)
#define F_2_5(i)    F_2_4(i),    F_2_4((i) + 16)
#define F_2_6(i)    F_2_5(i),    F_2_5((i) + 32)
#define F_2_7(i)    F_2_6(i),    F_2_6((i) + 64)
#define F_2_8(i)    F_2_7(i),    F_2_7((i) + 128)
#define F_2_9(i)    F_2_8(i),    F_2_8((i) + 256)
#define F_2_10(i)   F_2_9(i),    F_2_9((i) + 512)
#define F_2_11(i)   F_2_10(i),   F_2_10((i) + 1024)
#define F_2_12(i)   F_2_11(i),   F_2_11((i) + 2048)
#define F_2_13(i)   F_2_12(i),   F_2_12((i) + 4096)
#define F_2_14(i)   F_2_13(i),   F_2_13((i) + 8192)
#define F_2_15(i)   F_2_14(i),   F_2_14((i) + 16384)
#define F_2_16(i)   F_2_15(i),   F_2_15((i) + 32768)
#define F_2_17(i)   F_2_16(i),   F_2_16((i) + 65536)
#define F_2_18(i)   F_2_17(i),   F_2_17((i) + 131072)

static const uint32_t ssc_argonaut_primary_huffman_lookup2[65536] = {
#define F(i) (i)
    F_2_16(0)
#undef F
};